[{"/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/index.js":"1","/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/reportWebVitals.js":"2","/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/App.js":"3"},{"size":535,"mtime":1665516847671,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1665516847671,"results":"6","hashOfConfig":"5"},{"size":2887,"mtime":1665607568757,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"147ktvz",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/index.js",[],[],[],"/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/reportWebVitals.js",[],[],"/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/App.js",["19"],[],"//import logo from './logo.svg';\nimport './App.css';\n\nimport { useState,useEffet } from 'react';\n\nimport {ethers} from 'ethers';\n\nimport Lock from './artifacts/contracts/Lock.sol/Lock.json'; //Grace à ABI, on pourra interagir avec le contrat intelligent\n\nconst lockAdress=\"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\";\n\n//ABI permet d'interagir avec le front end avec le smart contract\n\nfunction App() {\n\n\n  const [lockedAmount,welcome_msg,setMessage]=useState();\n\n\n  useEffet(()=>{\n    retrieveMessage();  //Recuperation du Message \n },[]);\n\n  //Function that will permit user to connect toward UI\n  async function  requestAccount()\n  {\n    await window.ethereum.request({method:\"eth_requestAccounts\"})\n\n  }\n\n  //fontion permettant de recuperer le message d'Accueil\n\n  async function retrieveMessage()\n  {\n\n    if(typeof window.ethereum !==\"undefined\") //S'assurer que Metamask est bien connecté au site front-end\n    {\n\n      //Creation d'un nouveau fournisseur (provider)===> Ici  web3 Provider\n      const provider=new ethers.providers.Web3Provider(window.ethereum);\n\n\n      /** Cretaion d'une nouvelle instance du contrat \n       * On aura donc besoin de l'adresse où le contrat est deplyé, de l'ABI du contrat et 2\n       * du provider\n       */\n\n      const contrat = new ethers.Contract(lockAdress,Lock.abi,provider);\n      \n      /** Utilisation de cette variable de contrat pour interagir avec la fonction */\n\n      try\n      {\n        const data= await contrat.getMessage();  //Appel de la fonction de récupération du message d'Accueil\n\n        setMessage(data); //Modification du Message \n      }\n\n      catch(err)\n      {\n             console.log(err);\n      }\n    }\n  }\n\n/** Fonction de Formulaire qui permetra de renseigner le Message d'accueil */\n\nasync function setWelcomeMessage()\n{\n  if(!lockedAmount) return ;// Sortir de la fonction s'il n'y a pas de Message\n\n  if(typeof window.ethereum!==\"undefined\")\n  {\n    await requestAccount();  //Si le user est connecté à Metamask, on attend et  lui permet d'utiliser son compte\n\n    /**Creons un new provider pour pouvoir signer la transaction */\n    const provider=new ethers.providers.Web3Provider(window.ethereum);\n    const signer=provider.getSigner(); //Le tiers qui va permettre de signe les transactions\n\n    //Recupération du contrat\n    const contrat=new ethers.Contract(lockAdress,Lock.api,signer);\n\n    const transaction=await contrat.setMessage(lockedAmount);  //Changement du Message \n\n      setMessage('');  // Mettre le state à vide\n\n      await transaction.wait() //Attrendre que la transaction se déroule bien\n\n      retrieveMessage();\n  }\n\n}\n\n  return (\n    <div className=\"App\">\n     <p>{lockedAmount}</p>\n\n     <input onChange={e=>setMessage(e.target.value)} placeholder=\"Set message\" />\n\n     <button onClick={setWelcomeMessage}>Change Message</button>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":17,"column":23,"nodeType":"22","messageId":"23","endLine":17,"endColumn":34},"no-unused-vars","'welcome_msg' is assigned a value but never used.","Identifier","unusedVar"]