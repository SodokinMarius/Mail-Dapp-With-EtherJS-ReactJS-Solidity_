{"ast":null,"code":"var _jsxFileName = \"/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/App.js\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffet } from 'react';\nimport { ethers } from 'ethers';\nimport Lock from './artifacts/contracts/Lock.sol/Lock.json'; //Grace à ABI, on pourra interagir avec le contrat intelligent\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lockAdress = \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\";\n\n//ABI permet d'interagir avec le front end avec le smart contract\n\nfunction App() {\n  _s();\n  const [welcome_msg, setMessage] = useState();\n  useEffet(() => {\n    retrieveMessage();\n    setMessage();\n  }, []);\n\n  //Function that will permit user to connect toward UI\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n  }\n\n  //fontion permettant de recuperer le message d'Accueil\n\n  async function retrieveMessage() {\n    if (typeof window.ethereum !== \"undefined\")\n      //S'assurer que Metamask est bien connecté au site front-end\n      {\n        //Creation d'un nouveau fournisseur (provider)===> Ici  web3 Provider\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n        /** Cretaion d'une nouvelle instance du contrat \n         * On aura donc besoin de l'adresse où le contrat est deplyé, de l'ABI du contrat et 2\n         * du provider\n         */\n\n        const contrat = new ethers.Contract(lockAdress, Lock.abi, provider);\n\n        /** Utilisation de cette variable de contrat pour interagir avec la fonction */\n\n        try {\n          const data = await contrat.getMessage(); //Appel de la fonction de récupération du message d'Accueil\n\n          setMessage(data); //Modification du Message \n        } catch (err) {\n          console.log(err);\n        }\n      }\n  }\n\n  /** Fonction de Formulaire qui permetra de renseigner le Message d'accueil */\n\n  async function setWelcomeMessage() {\n    if (!welcome_msg) return; // Sortir de la fonction s'il n'y a pas de Message\n\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount(); //Si le user est connecté à Metamask, on attend et  lui permet d'utiliser son compte\n\n      /**Creons un new provider pour pouvoir signer la transaction */\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner(); //Le tiers qui va permettre de signe les transactions\n\n      //Recupération du contrat\n      const contrat = new ethers.Contract(lockAdress, Lock.api, signer);\n      const transaction = await contrat.setMessage(welcome_msg); //Changement du Message \n\n      setMessage(''); // Mettre le state à vide\n\n      await transaction.wait(); //Attrendre que la transaction se déroule bien\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: welcome_msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PY2UhPa84H0TRZPOIgN9AuFdxzY=\", false, function () {\n  return [useEffet];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffet","ethers","Lock","lockAdress","App","welcome_msg","setMessage","retrieveMessage","requestAccount","window","ethereum","request","method","provider","providers","Web3Provider","contrat","Contract","abi","data","getMessage","err","console","log","setWelcomeMessage","signer","getSigner","api","transaction","wait"],"sources":["/home/sodyam/Bureau/BOCKCHAIN PROJECT/Simple-Dapp-with-Solidity-React/mail-dapp/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n\nimport { useState,useEffet } from 'react';\n\nimport {ethers} from 'ethers';\n\nimport Lock from './artifacts/contracts/Lock.sol/Lock.json'; //Grace à ABI, on pourra interagir avec le contrat intelligent\n\nconst lockAdress=\"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\";\n\n//ABI permet d'interagir avec le front end avec le smart contract\n\nfunction App() {\n\n\n  const [welcome_msg,setMessage]=useState();\n\n\n  useEffet(()=>{\n    retrieveMessage();\nsetMessage() ;\n },[]);\n\n  //Function that will permit user to connect toward UI\n  async function  requestAccount()\n  {\n    await window.ethereum.request({method:\"eth_requestAccounts\"})\n\n  }\n\n  //fontion permettant de recuperer le message d'Accueil\n\n  async function retrieveMessage()\n  {\n\n    if(typeof window.ethereum !==\"undefined\") //S'assurer que Metamask est bien connecté au site front-end\n    {\n\n      //Creation d'un nouveau fournisseur (provider)===> Ici  web3 Provider\n      const provider=new ethers.providers.Web3Provider(window.ethereum);\n\n\n      /** Cretaion d'une nouvelle instance du contrat \n       * On aura donc besoin de l'adresse où le contrat est deplyé, de l'ABI du contrat et 2\n       * du provider\n       */\n\n      const contrat = new ethers.Contract(lockAdress,Lock.abi,provider);\n      \n      /** Utilisation de cette variable de contrat pour interagir avec la fonction */\n\n      try\n      {\n        const data= await contrat.getMessage();  //Appel de la fonction de récupération du message d'Accueil\n\n        setMessage(data); //Modification du Message \n      }\n\n      catch(err)\n      {\n             console.log(err);\n      }\n    }\n  }\n\n/** Fonction de Formulaire qui permetra de renseigner le Message d'accueil */\n\nasync function setWelcomeMessage()\n{\n  if(!welcome_msg) return ;// Sortir de la fonction s'il n'y a pas de Message\n\n  if(typeof window.ethereum!==\"undefined\")\n  {\n    await requestAccount();  //Si le user est connecté à Metamask, on attend et  lui permet d'utiliser son compte\n\n    /**Creons un new provider pour pouvoir signer la transaction */\n    const provider=new ethers.providers.Web3Provider(window.ethereum);\n    const signer=provider.getSigner(); //Le tiers qui va permettre de signe les transactions\n\n    //Recupération du contrat\n    const contrat=new ethers.Contract(lockAdress,Lock.api,signer);\n\n    const transaction=await contrat.setMessage(welcome_msg);  //Changement du Message \n\n      setMessage('');  // Mettre le state à vide\n\n      await transaction.wait() //Attrendre que la transaction se déroule bien\n  }\n\n}\n\n  return (\n    <div className=\"App\">\n     <p>{welcome_msg}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAO,WAAW;AAElB,SAASA,QAAQ,EAACC,QAAQ,QAAQ,OAAO;AAEzC,SAAQC,MAAM,QAAO,QAAQ;AAE7B,OAAOC,IAAI,MAAM,0CAA0C,CAAC,CAAC;AAAA;AAE7D,MAAMC,UAAU,GAAC,4CAA4C;;AAE7D;;AAEA,SAASC,GAAG,GAAG;EAAA;EAGb,MAAM,CAACC,WAAW,EAACC,UAAU,CAAC,GAACP,QAAQ,EAAE;EAGzCC,QAAQ,CAAC,MAAI;IACXO,eAAe,EAAE;IACrBD,UAAU,EAAE;EACX,CAAC,EAAC,EAAE,CAAC;;EAEJ;EACA,eAAgBE,cAAc,GAC9B;IACE,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAACC,MAAM,EAAC;IAAqB,CAAC,CAAC;EAE/D;;EAEA;;EAEA,eAAeL,eAAe,GAC9B;IAEE,IAAG,OAAOE,MAAM,CAACC,QAAQ,KAAI,WAAW;MAAE;MAC1C;QAEE;QACA,MAAMG,QAAQ,GAAC,IAAIZ,MAAM,CAACa,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC;;QAGjE;AACN;AACA;AACA;;QAEM,MAAMM,OAAO,GAAG,IAAIf,MAAM,CAACgB,QAAQ,CAACd,UAAU,EAACD,IAAI,CAACgB,GAAG,EAACL,QAAQ,CAAC;;QAEjE;;QAEA,IACA;UACE,MAAMM,IAAI,GAAE,MAAMH,OAAO,CAACI,UAAU,EAAE,CAAC,CAAE;;UAEzCd,UAAU,CAACa,IAAI,CAAC,CAAC,CAAC;QACpB,CAAC,CAED,OAAME,GAAG,EACT;UACOC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QACvB;MACF;EACF;;EAEF;;EAEA,eAAeG,iBAAiB,GAChC;IACE,IAAG,CAACnB,WAAW,EAAE,OAAQ;;IAEzB,IAAG,OAAOI,MAAM,CAACC,QAAQ,KAAG,WAAW,EACvC;MACE,MAAMF,cAAc,EAAE,CAAC,CAAE;;MAEzB;MACA,MAAMK,QAAQ,GAAC,IAAIZ,MAAM,CAACa,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC;MACjE,MAAMe,MAAM,GAACZ,QAAQ,CAACa,SAAS,EAAE,CAAC,CAAC;;MAEnC;MACA,MAAMV,OAAO,GAAC,IAAIf,MAAM,CAACgB,QAAQ,CAACd,UAAU,EAACD,IAAI,CAACyB,GAAG,EAACF,MAAM,CAAC;MAE7D,MAAMG,WAAW,GAAC,MAAMZ,OAAO,CAACV,UAAU,CAACD,WAAW,CAAC,CAAC,CAAE;;MAExDC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAE;;MAEjB,MAAMsB,WAAW,CAACC,IAAI,EAAE,EAAC;IAC7B;EAEF;;EAEE,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBACnB;MAAA,UAAIxB;IAAW;MAAA;MAAA;MAAA;IAAA;EAAK;IAAA;IAAA;IAAA;EAAA,QACf;AAEV;AAAC,GApFQD,GAAG;EAAA,QAMVJ,QAAQ;AAAA;AAAA,KANDI,GAAG;AAsFZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}